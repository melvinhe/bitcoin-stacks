(define-read-only LIQUIDATION_THRESHOLD (uint))
(define-read-only LIQUIDATION_BONUS (uint))
(define-read-only LIQUIDATION_PRECISION (uint))
(define-read-only MIN_HEALTH_FACTOR (uint))
(define-read-only PRECISION (uint))
(define-read-only ADDITIONAL_FEED_PRECISION (uint))
(define-read-only FEED_PRECISION (uint))

(define-private i_dsc (contract DecentralizedStableCoin))

(define-private s_priceFeeds (map address address)) 
(define-private s_collateralDeposited (map address (map address uint))) 
(define-private s_DSCMinted (map address uint)) 
(define-private s_collateralTokens (list address)) 

;; (event (CollateralDeposited (user address) (token address) (amount unit)))
;; (event (CollateralRedeemed (redeemFrom address) (redeemTo address) (token address) (amount uint)))

(define-constant DSCEngine__TokenAddressesAndPriceFeedAddressesAmountsDontMatch u0)
(define-constant DSCEngine__NeedsMoreThanZero u1)
(define-constant DSCEngine__TokenNotAllowed u2)
(define-constant DSCEngine__TransferFailed u3)
(define-constant DSCEngine__BreaksHealthFactoru u4)
(define-constant DSCEngine__MintFailed u5)
(define-constant DSCEngine__HealthFactorOk u6)
(define-constant DSCEngine__HealthFactorNotImproved u7)

(define-read-only moreThanZero (fun (amount uint) (if (is-eq amount u0) (err DSCEngine__NeedsMoreThanZero) (ok))))
(define-read-only isAllowedToken (fun (token address) (if (not (get s_priceFeeds token)) (err DSCEngine__TokenNotAllowed token) (ok))))

(define-private (constructor (tokenAddresses (list address)) (priceFeedAddresses (list address)) (dscAddress address))
  (if (not (len tokenAddresses) (len priceFeedAddresses)) (err DSCEngine__TokenAddressesAndPriceFeedAddressesAmountsDontMatch) (ok))
  (for (map tokenAddresses priceFeedAddresses) (pair (token address) (priceFeed address))
    (set s_priceFeeds token priceFeed)
    (set s_collateralTokens (append s_collateralTokens (list token)))
  )
  (set i_dsc (contract-call dscAddress "DecentralizedStableCoin")))
  
(define-public (depositCollateralAndMintDsc (tokenCollateralAddress address) (amountCollateral uint) (amountDscToMint uint))
  (depositCollateral tokenCollateralAddress amountCollateral)
  (mintDsc amountDscToMint))
  
(define-public (redeemCollateralForDsc (tokenCollateralAddress address) (amountCollateral uint) (amountDscToBurn uint))
  (assert (moreThanZero amountCollateral))
  (assert (isAllowedToken tokenCollateralAddress))
  (burnDsc amountDscToBurn (tx-sender) (tx-sender))
  (redeemCollateral tokenCollateralAddress amountCollateral (tx-sender) (tx-sender))
  (if (< (healthFactor (tx-sender)) MIN_HEALTH_FACTOR) (revert DSCEngine__BreaksHealthFactor (healthFactor (tx-sender))) (ok)))
  
(define-public (redeemCollateral (tokenCollateralAddress address) (amountCollateral uint))
  (assert (moreThanZero amountCollateral))
  (assert (isAllowedToken tokenCollateralAddress))
  (redeemCollateral tokenCollateralAddress amountCollateral (tx-sender) (tx-sender))
  (if (< (healthFactor (tx-sender)) MIN_HEALTH_FACTOR) (revert DSCEngine__BreaksHealthFactor (healthFactor (tx-sender))) (ok)))
  
(define-public (burnDsc (amount uint))
  (assert (moreThanZero amount))
  (burnDsc amount (tx-sender) (tx-sender))
  (if (< (healthFactor (tx-sender)) MIN_HEALTH_FACTOR) (revert DSCEngine__BreaksHealthFactor (healthFactor (tx-sender))) (ok)))
  
(define-public (liquidate (collateral address) (user address) (debtToCover uint))
  (assert (moreThanZero debtToCover))
  (let ((startingUserHealthFactor (healthFactor user)))
    (if (>= startingUserHealthFactor MIN_HEALTH_FACTOR) (revert DSCEngine__HealthFactorOk) (ok))
    (let ((tokenAmountFromDebtCovered (getTokenAmountFromUsd collateral debtToCover))
          (bonusCollateral (div (mul tokenAmountFromDebtCovered LIQUIDATION_BONUS) LIQUIDATION_PRECISION)))
      (redeemCollateral collateral (add tokenAmountFromDebtCovered bonusCollateral) user (tx-sender))
      (burnDsc debtToCover user (tx-sender))
      (let ((endingUserHealthFactor (healthFactor user)))
        (if (<= endingUserHealthFactor startingUserHealthFactor) (revert DSCEngine__HealthFactorNotImproved) (ok)))
      (if (< (healthFactor (tx-sender)) MIN_HEALTH_FACTOR) (revert DSCEngine__BreaksHealthFactor (healthFactor (tx-sender))) (ok)))))

(define-public (mintDsc (amount uint))
  (assert (moreThanZero amount))
  (set (s_DSCMinted (tx-sender)) (+ (s_DSCMinted (tx-sender)) amount))
  (if (< (healthFactor (tx-sender)) MIN_HEALTH_FACTOR) (revert DSCEngine__BreaksHealthFactor (healthFactor (tx-sender))) (ok))
  (let ((minted (contract-call i_dsc "mint" (list (tx-sender) amount))))
    (if (not minted) (revert DSCEngine__MintFailed) (ok))))

(define-public (depositCollateral (tokenCollateralAddress address) (amountCollateral uint))
  (assert (moreThanZero amountCollateral))
  (assert (isAllowedToken tokenCollateralAddress))
  (set (s_collateralDeposited (tx-sender) tokenCollateralAddress) (+ (s_collateralDeposited (tx-sender) tokenCollateralAddress) amountCollateral))
  (emit CollateralDeposited (tx-sender) tokenCollateralAddress amountCollateral)
  (let ((success (contract-call tokenCollateralAddress "transfer-from" (list (tx-sender) (contract-address) amountCollateral))))
    (if (not success) (revert DSCEngine__TransferFailed) (ok))))
    
(define-private (redeemCollateral (tokenCollateralAddress address) (amountCollateral uint) (from address) (to address))
  (set (s_collateralDeposited from tokenCollateralAddress) (- (s_collateralDeposited from tokenCollateralAddress) amountCollateral))
  (emit CollateralRedeemed from to tokenCollateralAddress amountCollateral)
  (let ((success (contract-call tokenCollateralAddress "transfer" (list to amountCollateral))))
    (if (not success) (revert DSCEngine__TransferFailed) (ok))))

(define-private (burnDsc (amount uint) (onBehalfOf address) (dscFrom address))
  (set (s_DSCMinted onBehalfOf) (- (s_DSCMinted onBehalfOf) amount))
  (let ((success (contract-call i_dsc "transfer-from" (list dscFrom (contract-address) amount))))
    (if (not success) (revert DSCEngine__TransferFailed) (ok)))
  (contract-call i_dsc "burn" (list amount)))
